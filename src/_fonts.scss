@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

/*
 * Font-Face
 * Use: @include font-face('robotobold', '@{fonts}roboto/roboto_bold', 500, normal, eot woff ttf svg);
**/
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

@mixin arial(){
    font-family:Arial, Helvetica, sans-serif;
}

@mixin regular(){
    font-weight: $font-weight-regular;
}

@mixin bold(){
    font-weight: $font-weight-strong;
}

@mixin italic(){
    font-style:italic;
}

@mixin normal(){
    font-style:normal;
    font-weight:normal;
}

@mixin notext(){
    text-indent: -9999px;
    font-size: 0;
    line-height: 0;
}

@mixin fsize($sizeValue: 15) {
    $remValue: ($sizeValue / 10);
    $pxValue: $sizeValue;
    font-size: $pxValue + px;
    font-size: $remValue + rem;
}

@mixin lower(){
    text-transform:lowercase;
}

@mixin upper(){
    text-transform:uppercase;
}

@mixin justify(){
    text-align:justify;
    > * {
        position: relative;
        top: 1.202em;
    }
    &:before{
        content: '';
        display: block;
        width: 100%;
        margin-bottom: -1.202em;
    }
    &:after{
        content:'';
        display:inline-block;
        width:100%;
    }
}